include("utilities.jl")
using Plots
using QuadGK
using Distributions
using Random
using Optim
using FiniteDiff 
using Bootstrap
using Statistics
using StatsPlots
using HypothesisTests
using LaTeXStrings
Random.seed!(1)
# Observaciones
N = 200
I‚ÇÄ = 0.0912*N*10^(-3)
obs = [0.1397, 0.1966, 0.2530, 0.3476, 0.4575, 0.6142, 0.7986, 0.8176, 0.6257, 0.8376, 0.3979]*10^(-3)
obs = obs.*N
obs_ts = collect(1:length(obs))
# 3 a 6 semana
Œ≥‚ÇÄ = 52/4.5
# estimaci√≥n de œÉ‚ÇÄ
œÉ‚ÇÄ = SIS_sigma_by_qv(vcat(I‚ÇÄ, obs), vcat(0, obs_ts))
# obtenci√≥n de Œ≤‚ÇÄ
Œ≤‚ÇÄ = (obs[1] - I‚ÇÄ + Œ≥‚ÇÄ*I‚ÇÄ)/(I‚ÇÄ*(N-I‚ÇÄ))
for i in 1:(length(obs)-1)
    Œ≤‚ÇÄ += (obs[i+1] - obs[i] + Œ≥‚ÇÄ*obs[i])/(obs[i]*(N-obs[i]))
end
Œ≤‚ÇÄ = Œ≤‚ÇÄ/(length(obs))
# Valores fijos de la simulaci√≥n de la verosimiliad
S = 2500
M = 10
h = 1/M 
# Valor inicial para el algoritmo de optimizaci√≥n
Œ∏‚ÇÄ = [Œ≤‚ÇÄ, Œ≥‚ÇÄ, œÉ‚ÇÄ]
# Cubo para la constrained optimization
lower = [0, 52/6, 0]
upper = [Inf, 52/3, Inf]
# errores fijos para toooooda la optimizaci√≥n
errores_sample = [rand(Normal(0, 1), (S, M+1)) for _ in 1:(length(obs)-1)]
DZ = errores_sample
# Optimizaci√≥n 
# F es la funci√≥n de log-verosimilitud
sol = optimize(x -> -F(x), lower, upper, Œ∏‚ÇÄ, Fminbox(BFGS()); inplace = false)
#sol = optimize(x -> -F(x), x0, BFGS())
# Estimador m√°ximo veros√≠mil simulado
Œ∏mle = sol.minimizer
# Simulaci√≥n de n trayectorias
# Horizonte temporal final
T = obs_ts[end]
# tama√±o de paso para las simulaciones
dt = 0.001
ts = collect(0:dt:T)
# Aqu√≠ se guardar√°n las simulaciones
n_simulaciones = 500
sim = zeros(n_simulaciones, length(ts))
# Simulaci√≥n de trayectorias con los par√°metros de MV
for i in 1:n_simulaciones
    sim[i, 1:end] = solveSIS(vcat(Œ∏mle, N), T, I‚ÇÄ; dt = dt)
end
# Ahora 
intervals = zeros(3, length(ts))
# Obtenci√≥n de la media y los quantiles 0.05 y 0.95
for i in 1:length(ts)
    datai = sim[1:end, i]
    intervals[2, i] = mean(datai)
    intervals[1, i] = quantile(datai, 0.05)
    intervals[3, i] = quantile(datai, 0.95)
end
# Gr√°ficas ü¶ñ
m = intervals[2, 1:end] # mean para X‚Çú
low = intervals[1, 1:end] # cuantil 0.05 para X‚Çú
upper = intervals[3, 1:end] # cuantil 0.95 
plot(ts, m, ribbon = (m.-low, upper.-m), label = "Media de la trayectoria", lw = 2,
     title = "Simulaci√≥n de trayectorias con "*L"\theta_{MVS}", 
     xlabel = "Tiempo (en a√±os)", ylabel = "N√∫mero de infectados (en millones)")
plot!(ts, low, color = :gray, label = "Cuantiles p = 0.05, 0.95")
plot!(ts, upper, color = :gray, label = false)
plot_sims = plot!(obs_ts, obs, seriestype = :scatter, label = "Observaciones", dpi = 200)
savefig(plot_sims, "D:/Edgar Trejo/Universidad/Proyecto/data/images/sims_theta_MVS.png")
# Validaci√≥n del modelo :)
# Obtenci√≥n de valores estimados
Œ≤mle, Œ≥mle, œÉmle = Œ∏mle
# Definici√≥n de h(x) y su inversa
# func_h(x) = (1/(N*œÉ‚ÇÄ))*log(x/(N-x))
inv_h(x) = (N*exp(œÉmle*N*x))/(1+exp(œÉmle*N*x))
# Funciones de deriva y con los par√°metros estimados
func_b(x) = Œ≤mle*x*(N-x)-Œ≥mle*x
func_s(x) = œÉmle*x*(N-x)
func_ds(x) = œÉmle*(N-2x)
# Definici√≥n de la funci√≥n Œº en la transformaci√≥n de Lamperti
func_Œº(x) = func_b(inv_h(x))/func_s(inv_h(x)) - (1/2)*func_ds(inv_h(x))
# C√°lculo de los residuales
n = length(obs)
residuals = zeros(n-1)
for i in 2:n
    residuals[i-1] = obs[i] - obs[i-1] - func_Œº(obs[i-1])
end
# An√°lsis de los residuales ¬øCumplen con la normalidad?
# qq-plot: los puntos deben estar en la identidad 
plot_qq = plot(qqnorm(residuals), xlabel = "Datos", ylabel = "Normales", 
title = "Comparaci√≥n de residuales", dpi = 200)
savefig(plot_qq, "D:/Edgar Trejo/Universidad/Proyecto/data/images/qqplot_info_incompleta.png")
# prueba estad√≠stica
prueba = ShapiroWilkTest(residuals)

